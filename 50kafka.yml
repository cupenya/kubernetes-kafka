apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  serviceName: "broker"
  replicas: 3
  template:
    metadata:
      labels:
        app: kafka
      annotations:
        service-discovery.datadoghq.com/broker.check_names: '["kafka"]'
        service-discovery.datadoghq.com/broker.init_configs: '[{"is_jmx":true,"conf":[{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=ProducerRequestMetrics,name=ProducerRequestRateAndTimeMs,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.producer.request_rate"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=ProducerRequestMetrics,name=ProducerRequestRateAndTimeMs,clientId=.*","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.producer.request_latency_avg"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=ProducerTopicMetrics,name=BytesPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.producer.bytes_out"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=ProducerTopicMetrics,name=MessagesPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.producer.message_rate"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=producer-metrics,client-id=.*","attribute":{"response-rate":{"metric_type":"gauge","alias":"kafka.producer.response_rate"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=producer-metrics,client-id=.*","attribute":{"request-rate":{"metric_type":"gauge","alias":"kafka.producer.request_rate"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=producer-metrics,client-id=.*","attribute":{"request-latency-avg":{"metric_type":"gauge","alias":"kafka.producer.request_latency_avg"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=producer-metrics,client-id=.*","attribute":{"outgoing-byte-rate":{"metric_type":"gauge","alias":"kafka.producer.bytes_out"}}}},{"include":{"domain":"kafka.producer","bean_regex":"kafka\\.producer:type=producer-metrics,client-id=.*","attribute":{"io-wait-time-ns-avg":{"metric_type":"gauge","alias":"kafka.producer.io_wait"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ConsumerFetcherManager,name=MaxLag,clientId=.*","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.consumer.max_lag"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ConsumerFetcherManager,name=MinFetchRate,clientId=.*","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.consumer.fetch_rate"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ConsumerTopicMetrics,name=BytesPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.consumer.bytes_in"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ConsumerTopicMetrics,name=MessagesPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.consumer.messages_in"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ZookeeperConsumerConnector,name=ZooKeeperCommitsPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.consumer.zookeeper_commits"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=ZookeeperConsumerConnector,name=KafkaCommitsPerSec,clientId=.*","attribute":{"Count":{"metric_type":"rate","alias":"kafka.consumer.kafka_commits"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=consumer-fetch-manager-metrics,client-id=.*","attribute":{"bytes-consumed-rate":{"metric_type":"gauge","alias":"kafka.consumer.bytes_in"}}}},{"include":{"domain":"kafka.consumer","bean_regex":"kafka\\.consumer:type=consumer-fetch-manager-metrics,client-id=.*","attribute":{"records-consumed-rate":{"metric_type":"gauge","alias":"kafka.consumer.messages_in"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=BytesOutPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.net.bytes_out.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=BytesInPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.net.bytes_in.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=MessagesInPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.messages_in.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=BytesRejectedPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.net.bytes_rejected.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=FailedFetchRequestsPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.fetch.failed.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=BrokerTopicMetrics,name=FailedProduceRequestsPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.produce.failed.rate"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=RequestsPerSec,request=Produce","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.produce.rate"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=Produce","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.produce.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.produce.time.99percentile"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=RequestsPerSec,request=FetchConsumer","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.fetch_consumer.rate"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=RequestsPerSec,request=FetchFollower","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.fetch_follower.rate"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchConsumer","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.fetch_consumer.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.fetch_consumer.time.99percentile"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.fetch_follower.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.fetch_follower.time.99percentile"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=UpdateMetadata","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.update_metadata.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.update_metadata.time.99percentile"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=Metadata","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.metadata.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.metadata.time.99percentile"}}}},{"include":{"domain":"kafka.network","bean":"kafka.network:type=RequestMetrics,name=TotalTimeMs,request=Offsets","attribute":{"Mean":{"metric_type":"gauge","alias":"kafka.request.offsets.time.avg"},"99thPercentile":{"metric_type":"gauge","alias":"kafka.request.offsets.time.99percentile"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent","attribute":{"Count":{"metric_type":"rate","alias":"kafka.request.handler.avg.idle.pct.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ProducerRequestPurgatory,name=PurgatorySize","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.request.producer_request_purgatory.size"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=FetchRequestPurgatory,name=PurgatorySize","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.request.fetch_request_purgatory.size"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.under_replicated_partitions"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaManager,name=IsrShrinksPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.replication.isr_shrinks.rate"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaManager,name=IsrExpandsPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.replication.isr_expands.rate"}}}},{"include":{"domain":"kafka.controller","bean":"kafka.controller:type=ControllerStats,name=LeaderElectionRateAndTimeMs","attribute":{"Count":{"metric_type":"rate","alias":"kafka.replication.leader_elections.rate"}}}},{"include":{"domain":"kafka.controller","bean":"kafka.controller:type=ControllerStats,name=UncleanLeaderElectionsPerSec","attribute":{"Count":{"metric_type":"rate","alias":"kafka.replication.unclean_leader_elections.rate"}}}},{"include":{"domain":"kafka.controller","bean":"kafka.controller:type=KafkaController,name=OfflinePartitionsCount","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.offline_partitions_count"}}}},{"include":{"domain":"kafka.controller","bean":"kafka.controller:type=KafkaController,name=ActiveControllerCount","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.active_controller_count"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaManager,name=PartitionCount","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.partition_count"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaManager,name=LeaderCount","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.leader_count"}}}},{"include":{"domain":"kafka.server","bean":"kafka.server:type=ReplicaFetcherManager,name=MaxLag,clientId=Replica","attribute":{"Value":{"metric_type":"gauge","alias":"kafka.replication.max_lag"}}}},{"include":{"domain":"kafka.log","bean":"kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs","attribute":{"Count":{"metric_type":"rate","alias":"kafka.log.flush_rate.rate"}}}}]}]'
        service-discovery.datadoghq.com/broker.instances: '[{"host": "%%host%%", "port": 5555}]'
    spec:
      nodeSelector:
        "cloud.google.com/gke-nodepool": dev-pool
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: init-config
        image: solsson/kafka-initutils@sha256:c275d681019a0d8f01295dbd4a5bae3cfa945c8d0f7f685ae1f00f2579f08c7d
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command: ['/bin/bash', '/etc/kafka/init.sh']
        volumeMounts:
        - name: config
          mountPath: /etc/kafka
      imagePullSecrets:
        - name: cpy-docker-test-registry
      containers:
      - name: broker
        image: elmarweber/kafka:fix-6030v2
#        image: solsson/kafka:0.11.0.1@sha256:3a77b3396b0890b0b0db880136c16bc83922588ed1d9a9ed82e32c1ae7621770
        env:
        - name: KAFKA_LOG4J_OPTS
          value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        - name: JMX_PORT
          value: "5555"
        ports:
        - containerPort: 9092
        command:
        - ./bin/kafka-server-start.sh
        - /etc/kafka/server.properties
        - --override
        -   zookeeper.connect=zookeeper:2181
        - --override
        -   log.retention.hours=-1
        - --override
        -   log.dirs=/var/lib/kafka/data/topics
        - --override
        -   auto.create.topics.enable=false
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 11
        volumeMounts:
        - name: config
          mountPath: /etc/kafka
        - name: data
          mountPath: /var/lib/kafka/data
      volumes:
      - name: config
        configMap:
          name: broker-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200Gi
